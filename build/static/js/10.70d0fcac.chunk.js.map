<<<<<<<< HEAD:build/static/js/10.98b9aed8.chunk.js.map
{"version":3,"sources":["components/Properties/CopyInternalCode.jsx","components/Other/Loader/Loader.jsx","components/Other/ConfirmDelete.jsx","components/Properties/Property/Card/BadgePropertyCard.jsx","components/Other/Search.jsx","components/Customers/ViewCustomerProperties.jsx","components/Customers/AssociateProperty.jsx","components/Customers/CreateCustomer.jsx","components/Customers/EditAssociateProperty.jsx","components/Customers/EditCustomer.jsx","pages/Customers.jsx"],"names":["CopyInternalCode","props","internalCode","noMarginLeft","text","iconSize","notification","useToast","toastId","display","justifyContent","ml","hasArrow","label","bg","mt","cursor","onClick","isActive","id","title","description","status","duration","position","isClosable","navigator","clipboard","writeText","notificationAndCopyToClipboard","alignSelf","fontSize","Loader","color","className","ConfirmDelete","functionToExecute","topText","element","name","onlyText","anotherElement","onlyIcon","icon","noMarginTopInIcon","useDisclosure","isOpen","onOpen","onClose","w","_hover","background","_active","boxShadow","_focus","pt","mr","variant","motionPreset","isCentered","fontWeight","BadgePropertyCard","bgColor","borderRadius","px","py","alignItems","Search","listToFilter","filters","listSetter","placeHolder","normalize","value","String","replace","toLowerCase","filterData","searchText","filteredList","filter","item","splittedFilter","split","property","length","includes","pointerEvents","children","onChange","e","st","target","border","placeholder","ViewCustomerProperties","customer","reportButton","parsePropertyType","propertyType","textTransform","size","h","mb","pb","p","spacing","height","textAlign","orientation","ownerProperties","map","type","slice","concat","_id","tenantProperties","AssociateProperty","setAssociatedPropertiesPendingToAdd","useContext","CustomersContext","properties","PropertiesContext","useState","propertyCode","setPropertyCode","setPropertyType","associatedProperties","setAssociatedProperties","showError","setShowError","showErrorTypeIsRequired","setShowErrorTypeIsRequired","showCustomerAlreadyHasThatProp","setShowCustomerAlreadyHasThatProp","showNoPropWithThatCodeError","setShowNoPropWithThatCodeError","leftIcon","placement","borderLeft","borderStartStartRadius","borderEndStartRadius","borderBottomWidth","htmlFor","autoComplete","whiteSpace","event","selected","form","data","trim","find","code","associateProperty","gap","left","right","newAssociatedProperties","removeAssociatedProperty","borderTopWidth","forEach","push","submitAssociateProperty","CreateCustomer","addCustomer","associatedPropertiesPendingToAdd","useForm","register","handleSubmit","errors","formState","reset","onSubmit","required","message","email","phone","EditAssociateProperty","useEffect","customerProperties","prop","getCustomerProperties","EditCustomer","editCustomer","direction","reactiveCustomer","setReactiveCustomer","customerHaveProperties","CustomersPage","customers","deleteCustomer","customersAreLoading","filteredCustomers","setFilteredCustomers","maxWidth","zIndex"],"mappings":"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","file":"static/js/10.98b9aed8.chunk.js","sourcesContent":["import { Box, Tooltip, useToast } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { IoMdCopy } from \"react-icons/io\";\r\n\r\nconst CopyInternalCode = (props) => {\r\n  const { internalCode, noMarginLeft, text, iconSize } = props;\r\n  const notification = useToast();\r\n  const toastId = internalCode;\r\n\r\n  const notificationAndCopyToClipboard = () => {\r\n    if (!notification.isActive(toastId)) {\r\n      notification({\r\n        id: toastId,\r\n        title: `Código de ${text} copiado al portapapeles`,\r\n        description: `Has copiado el código ${internalCode}`,\r\n        status: \"success\",\r\n        duration: 4000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n    }\r\n    navigator.clipboard?.writeText(internalCode);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"center\" ml={noMarginLeft ? 0 : 1.5}>\r\n        {internalCode}\r\n        <Tooltip\r\n          hasArrow\r\n          label=\"Copiar código al portapapeles\"\r\n          bg=\"defaultColor.500\"\r\n          mt=\"0.2rem\"\r\n        >\r\n          <Box\r\n            cursor=\"pointer\"\r\n            onClick={() => {\r\n              notificationAndCopyToClipboard();\r\n            }}\r\n            alignSelf=\"center\"\r\n            ml=\"0.4rem\"\r\n          >\r\n            <IoMdCopy fontSize={iconSize ? iconSize : null} />\r\n          </Box>\r\n        </Tooltip>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyInternalCode;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nconst Loader = (props) => {\r\n  const { color } = props;\r\n  return (\r\n    <>\r\n      <Box\r\n        color={color == \"white\" ? \"#fff !important\" : \"#304580\"}\r\n        className=\"loader\"\r\n      ></Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Button,\r\n  Text,\r\n  useDisclosure,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { FaTrashAlt, FaUserMinus } from \"react-icons/fa\";\r\nimport React from \"react\";\r\n\r\nconst ConfirmDelete = (props) => {\r\n  const {\r\n    functionToExecute,\r\n    text,\r\n    topText,\r\n    element,\r\n    name,\r\n    onlyText,\r\n    anotherElement,\r\n    onlyIcon,\r\n    icon,\r\n    noMarginTopInIcon,\r\n  } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const execute = () => {\r\n    onClose();\r\n    functionToExecute(element, anotherElement ? anotherElement : null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {onlyIcon ? (\r\n        <Box onClick={onOpen} mt={noMarginTopInIcon ? \"0\" : \"7px\"} ml=\"6.5px\">\r\n          {icon === \"userIcon\" ? (\r\n            <FaUserMinus fontSize=\"1.3rem\" cursor=\"pointer\" />\r\n          ) : (\r\n            <FaTrashAlt fontSize=\"0.9rem\" />\r\n          )}\r\n        </Box>\r\n      ) : onlyText ? (\r\n        <Button\r\n          w=\"100%\"\r\n          bg=\"none\"\r\n          _hover={{ background: \"none\" }}\r\n          onClick={onOpen}\r\n          _active={{ boxShadow: \"none\" }}\r\n          _focus={{ boxShadow: \"none\" }}\r\n        >\r\n          <Text pt=\"0.7rem\">Eliminar</Text>\r\n        </Button>\r\n      ) : (\r\n        <Button mr=\"0.8rem\" w=\"10rem\" onClick={onOpen} variant=\"delete-button\">\r\n          <Text>Eliminar propiedad</Text>\r\n        </Button>\r\n      )}\r\n\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n        <AlertDialogContent bg=\"defaultColor.400\" color=\"#fff\">\r\n          <AlertDialogHeader>Eliminar {name}</AlertDialogHeader>\r\n          <AlertDialogCloseButton mt=\"0.5rem\" _focus={{ boxShadow: \"none\" }} />\r\n          <AlertDialogBody>\r\n            <Box mt=\"-2\" fontWeight=\"500\" fontSize=\"0.95rem\">\r\n              {topText}\r\n            </Box>\r\n            <Box mt=\"2\">{text}</Box>\r\n          </AlertDialogBody>\r\n          <AlertDialogFooter>\r\n            <Button variant=\"cancel-action\" onClick={onClose}>\r\n              No\r\n            </Button>\r\n            <Button variant=\"delete-button\" onClick={() => execute()} ml={3}>\r\n              Confirmar\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React from \"react\";\r\nimport { Box, Badge } from \"@chakra-ui/react\";\r\n\r\nconst BadgePropertyCard = (props) => {\r\n  const { title, icon, bgColor } = props;\r\n\r\n  return (\r\n    <Badge\r\n      w=\"auto\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"7px\"\r\n      ml=\"-0.5\"\r\n      px=\"2\"\r\n      py=\"0.5\"\r\n      bg={bgColor ? bgColor : \"defaultColor.400\"}\r\n      color=\"#fff\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Box mr=\"1\" fontSize=\"0.9rem\">\r\n        {icon}\r\n      </Box>\r\n      <Box>{title}</Box>\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default BadgePropertyCard;\r\n","import { Input, InputGroup, InputLeftElement } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\nconst Search = (props) => {\r\n  const { listToFilter, filters, listSetter, placeHolder } = props;\r\n\r\n  let normalize = (value) => {\r\n    return String(value)\r\n      .normalize(\"NFD\")\r\n      .replace(/[\\u0300-\\u036f]/g, \"\")\r\n      .toLowerCase();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const st = normalize(e.target.value);\r\n    if (st !== \"\") {\r\n      filterData(st);\r\n    } else {\r\n      listSetter(listToFilter);\r\n    }\r\n  };\r\n\r\n  const filterData = (searchText) => {\r\n    const filteredList = listToFilter.filter((item) => {\r\n      for (const filter of filters) {\r\n        const splittedFilter = filter.split(\".\");\r\n        let property = item[splittedFilter[0]];\r\n        if (splittedFilter.length > 1) {\r\n          property = property[splittedFilter[1]];\r\n        }\r\n        if (normalize(property).includes(searchText)) {\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n    listSetter(filteredList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputGroup>\r\n        <InputLeftElement\r\n          pointerEvents=\"none\"\r\n          children={<FaSearch color=\"#304580\" />}\r\n        />\r\n        <Input\r\n          onChange={handleChange}\r\n          border=\"2px solid #304580\"\r\n          placeholder={placeHolder}\r\n          mr=\"1rem\"\r\n        ></Input>\r\n      </InputGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  Tooltip,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { BsHouseDoorFill } from \"react-icons/bs\";\r\nimport { FaWarehouse } from \"react-icons/fa\";\r\nimport { MdApartment } from \"react-icons/md\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport BadgePropertyCard from \"../Properties/Property/Card/BadgePropertyCard\";\r\nimport CopyInternalCode from \"../Properties/CopyInternalCode\";\r\n\r\nconst ViewCustomerProperties = (props) => {\r\n  const { customer, reportButton } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const parsePropertyType = (propertyType) => {\r\n    if (propertyType[0] === \"Casa\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Casa\"\r\n          icon={<BsHouseDoorFill />}\r\n        />\r\n      );\r\n    } else if (propertyType[0] === \"Apartamento\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Apartamento\"\r\n          icon={<MdApartment />}\r\n        />\r\n      );\r\n    } else if (propertyType[0] === \"Depósito\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Depósito\"\r\n          icon={<FaWarehouse />}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        {reportButton ? (\r\n          <Button\r\n            mt=\"0.8rem\"\r\n            w=\"100%\"\r\n            fontSize=\"0.8rem\"\r\n            fontWeight=\"bold\"\r\n            textTransform=\"uppercase\"\r\n            justifyContent=\"center\"\r\n            borderRadius=\"7px\"\r\n            bg=\"defaultColor.500\"\r\n            color=\"#fff\"\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            onClick={onOpen}\r\n            variant=\"reports-button\"\r\n          >\r\n            <BsFillHouseDoorFill fontSize=\"15px\" />\r\n            <Text ml=\"0.5rem\">Ver propiedades</Text>\r\n          </Button>\r\n        ) : (\r\n          <Badge\r\n            fontSize=\"0.7rem\"\r\n            fontWeight=\"bold\"\r\n            color=\"white\"\r\n            bgColor=\"defaultColor.400\"\r\n            boxShadow=\"base\"\r\n            borderRadius=\"15px\"\r\n            px={2}\r\n            py={1}\r\n            display=\"flex\"\r\n            onClick={onOpen}\r\n            cursor=\"pointer\"\r\n          >\r\n            <BsFillHouseDoorFill fontSize=\"15px\" />\r\n            <Text ml=\"0.5rem\">Ver propiedades</Text>\r\n          </Badge>\r\n        )}\r\n      </Box>\r\n      <Modal\r\n        size=\"5xl\"\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        isCentered\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay alignItems=\"center\" h=\"100vh !important\" />\r\n        <ModalContent bg=\"defaultColor.400\" color=\"#fff\">\r\n          <ModalHeader fontSize=\"1.1rem\" mb=\"0\" pb=\"0\" pt=\"0.7rem\">\r\n            <Box>\r\n              <Box>Propiedades de {customer.name}</Box>\r\n            </Box>\r\n          </ModalHeader>\r\n          <ModalCloseButton _focus={{ boxShadow: \"none\" }} onClick={onClose} />\r\n          <ModalBody pb=\"1.5rem\">\r\n            <Box position=\"relative\">\r\n              <Box\r\n                display=\"flex\"\r\n                bg=\"defaultColor.500\"\r\n                p=\"3\"\r\n                borderRadius=\"7px\"\r\n                alignItems=\"center\"\r\n                mb=\"4\"\r\n              >\r\n                <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                  <>\r\n                    <Box w=\"13%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">C. Interno</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"15%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Tipo</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Nombre</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Descripción</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Vínculo</Text>\r\n                    </Box>\r\n                  </>\r\n                </HStack>\r\n              </Box>\r\n              {customer.ownerProperties.length > 0 &&\r\n                customer.ownerProperties.map((property) => (\r\n                  <Box\r\n                    key={property._id}\r\n                    display=\"flex\"\r\n                    bg=\"defaultColor.300\"\r\n                    p=\"3\"\r\n                    borderRadius=\"7px\"\r\n                    alignItems=\"center\"\r\n                    mb=\"4\"\r\n                  >\r\n                    <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                      <>\r\n                        <Box w=\"12%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <CopyInternalCode\r\n                            text=\"propiedad\"\r\n                            internalCode={\r\n                              property.internalCode\r\n                                ? property.internalCode\r\n                                : \"CÓDIGO\"\r\n                            }\r\n                          />\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"15%\" px=\"0rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box>{parsePropertyType(property.type)}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          {property.name.length > 17 ? (\r\n                            <Tooltip\r\n                              hasArrow\r\n                              label={property.name}\r\n                              bg=\"defaultColor.500\"\r\n                            >\r\n                              <Box>\r\n                                {property.name\r\n                                  .slice(0, 17)\r\n                                  .concat(\"...\")}\r\n                              </Box>\r\n                            </Tooltip>\r\n                          ) : (\r\n                            <Box>{property.name}</Box>\r\n                          )}\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          {property.description.length > 38 ? (\r\n                            <Tooltip\r\n                              hasArrow\r\n                              label={property.description}\r\n                              bg=\"defaultColor.500\"\r\n                            >\r\n                              <Box>\r\n                                {property.description\r\n                                  .slice(0, 38)\r\n                                  .concat(\"...\")}\r\n                              </Box>\r\n                            </Tooltip>\r\n                          ) : (\r\n                            <Box>{property.description}</Box>\r\n                          )}\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0.5rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box>\r\n                            <Badge\r\n                              w=\"auto\"\r\n                              justifyContent=\"center\"\r\n                              borderRadius=\"7px\"\r\n                              ml=\"-0.5\"\r\n                              px=\"2\"\r\n                              py=\"0.5\"\r\n                              bg=\"defaultColor.500\"\r\n                              color=\"#fff\"\r\n                              display=\"flex\"\r\n                              alignItems=\"center\"\r\n                            >\r\n                              Dueño\r\n                            </Badge>\r\n                          </Box>\r\n                        </Box>\r\n                        {/* <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <PropertyDetails\r\n                            propertyName={property.name}\r\n                            property={property}\r\n                          />\r\n                        </Box> */}\r\n                      </>\r\n                    </HStack>\r\n                  </Box>\r\n                ))}\r\n              {customer.tenantProperties.length > 0 &&\r\n                customer.tenantProperties.map((property) => (\r\n                  <Box\r\n                    key={property._id}\r\n                    display=\"flex\"\r\n                    bg=\"defaultColor.300\"\r\n                    p=\"3\"\r\n                    borderRadius=\"7px\"\r\n                    alignItems=\"center\"\r\n                    mb=\"4\"\r\n                  >\r\n                    <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                      <>\r\n                        <Box w=\"12%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <CopyInternalCode\r\n                            text=\"propiedad\"\r\n                            internalCode={\r\n                              property.internalCode\r\n                                ? property.internalCode\r\n                                : \"CÓDIGO\"\r\n                            }\r\n                          />\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">\r\n                            {parsePropertyType(property.type)}\r\n                          </Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">{property.name}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">{property.description}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0.5rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">\r\n                            <Badge\r\n                              w=\"auto\"\r\n                              justifyContent=\"center\"\r\n                              borderRadius=\"7px\"\r\n                              ml=\"-0.5\"\r\n                              px=\"1\"\r\n                              py=\"0.5\"\r\n                              bg=\"defaultColor.500\"\r\n                              color=\"#fff\"\r\n                              display=\"flex\"\r\n                              alignItems=\"center\"\r\n                            >\r\n                              Inquilino\r\n                            </Badge>\r\n                          </Box>\r\n                        </Box>\r\n                        {/* <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <PropertyDetails\r\n                            propertyName={property.name}\r\n                            property={property}\r\n                          />\r\n                        </Box> */}\r\n                      </>\r\n                    </HStack>\r\n                  </Box>\r\n                ))}\r\n            </Box>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewCustomerProperties;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { RiCloseCircleFill } from \"react-icons/ri\";\r\nimport PropertiesContext from \"../../context/Properties/PropertiesContext\";\r\n\r\nconst AssociateProperty = (props) => {\r\n  const { setAssociatedPropertiesPendingToAdd } = useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { properties } = useContext(PropertiesContext);\r\n  const [propertyCode, setPropertyCode] = useState(\"\");\r\n  const [propertyType, setPropertyType] = useState(\"\");\r\n  const [associatedProperties, setAssociatedProperties] = useState([]);\r\n  const [showError, setShowError] = useState(false);\r\n  const [showErrorTypeIsRequired, setShowErrorTypeIsRequired] = useState(false);\r\n  const [showCustomerAlreadyHasThatProp, setShowCustomerAlreadyHasThatProp] =\r\n    useState(false);\r\n  const [showNoPropWithThatCodeError, setShowNoPropWithThatCodeError] =\r\n    useState(false);\r\n\r\n  const associateProperty = (data) => {\r\n    if (propertyCode.trim() != \"\") {\r\n      if (propertyType == \"\") {\r\n        setShowErrorTypeIsRequired(true);\r\n      } else {\r\n        setShowErrorTypeIsRequired(false);\r\n        if (\r\n          associatedProperties.find(\r\n            (property) => property.code === propertyCode\r\n          )\r\n        ) {\r\n          setShowCustomerAlreadyHasThatProp(true);\r\n        } else {\r\n          if (\r\n            properties.find(\r\n              (property) => property.internalCode === propertyCode\r\n            )\r\n          ) {\r\n            let property = {\r\n              code: propertyCode,\r\n              type: propertyType,\r\n            };\r\n            setAssociatedProperties([...associatedProperties, property]);\r\n            setPropertyCode(\"\");\r\n            setPropertyType(\"\");\r\n          } else {\r\n            setShowNoPropWithThatCodeError(true);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n  };\r\n\r\n  const removeAssociatedProperty = (propertyCode) => {\r\n    const newAssociatedProperties = associatedProperties.filter(\r\n      (property) => property.code != propertyCode\r\n    );\r\n    setAssociatedProperties(newAssociatedProperties);\r\n  };\r\n\r\n  const submitAssociateProperty = () => {\r\n    let ownerProperties = [];\r\n    let tenantProperties = [];\r\n    associatedProperties.forEach((property) => {\r\n      if (property.type === \"Dueño\") {\r\n        ownerProperties.push(property.code);\r\n      } else if (property.type === \"Inquilino\") {\r\n        tenantProperties.push(property.code);\r\n      }\r\n    });\r\n\r\n    const data = { ownerProperties, tenantProperties };\r\n    setAssociatedPropertiesPendingToAdd(data);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w={\"100%\"}\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<BsFillHouseDoorFill fontSize=\"18px\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button-clear\"\r\n      >\r\n        Asociar propiedades\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Asociar propiedades\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <Stack spacing=\"14px\">\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Código interno de la propiedad\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"CustomerProperty\"\r\n                  placeholder=\"Ingresa el código\"\r\n                  autoComplete=\"off\"\r\n                  type=\"number\"\r\n                  value={propertyCode}\r\n                  onChange={(e) => {\r\n                    setPropertyCode(e.target.value);\r\n                    setShowError(false);\r\n                    setShowNoPropWithThatCodeError(false);\r\n                    setShowCustomerAlreadyHasThatProp(false);\r\n                  }}\r\n                />\r\n                <Badge\r\n                  display={showError ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El código interno es requerido.\r\n                </Badge>\r\n                <Badge\r\n                  whiteSpace=\"inital\"\r\n                  display={\r\n                    showCustomerAlreadyHasThatProp ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El cliente ya tiene esta propiedad registrada.\r\n                </Badge>\r\n                <Badge\r\n                  display={\r\n                    showNoPropWithThatCodeError ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  No hay propiedades con ese código.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Tipo de vínculo\r\n                </FormLabel>\r\n                <Select\r\n                  id=\"CustomerType\"\r\n                  placeholder=\"Selecciona el tipo\"\r\n                  value={propertyType}\r\n                  onChange={(event) => {\r\n                    setPropertyType(event.target.value);\r\n                    setShowErrorTypeIsRequired(false);\r\n                  }}\r\n                >\r\n                  <option value=\"Dueño\" selected>\r\n                    Dueño\r\n                  </option>\r\n                  <option value=\"Inquilino\">Inquilino</option>\r\n                </Select>\r\n                <Badge\r\n                  display={showErrorTypeIsRequired ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El tipo de vínculo es requerido.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  w=\"100%\"\r\n                  type=\"button\"\r\n                  form=\"CustomerPropertyForm\"\r\n                  variant=\"confirm-add-button\"\r\n                  onClick={() => associateProperty()}\r\n                >\r\n                  Agregar\r\n                </Button>\r\n              </Box>\r\n              {associatedProperties.map((property) => (\r\n                <Box\r\n                  key={property.code}\r\n                  bg=\"defaultColor.500\"\r\n                  w=\"100%\"\r\n                  borderRadius=\"7px\"\r\n                  py=\"0.4rem\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  gap=\"5px\"\r\n                  position=\"relative\"\r\n                >\r\n                  <Badge\r\n                    alignSelf=\"center\"\r\n                    position=\"absolute\"\r\n                    left=\"3\"\r\n                    fontSize=\"0.7rem\"\r\n                    borderRadius=\"7px\"\r\n                  >\r\n                    {property.type}\r\n                  </Badge>\r\n                  <Box>{property.code}</Box>\r\n                  <Box\r\n                    alignSelf=\"center\"\r\n                    cursor=\"pointer\"\r\n                    position=\"absolute\"\r\n                    right=\"3\"\r\n                    onClick={() => removeAssociatedProperty(property.code)}\r\n                  >\r\n                    <RiCloseCircleFill fontSize=\"1.2rem\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"confirm-add-button\"\r\n              onClick={() => submitAssociateProperty()}\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssociateProperty;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { HiPlus } from \"react-icons/hi\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport AssociateProperty from \"./AssociateProperty\";\r\n\r\nconst CreateCustomer = (props) => {\r\n  const { addCustomer, associatedPropertiesPendingToAdd } =\r\n    useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [customerType, setCustomerType] = useState(\"\");\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  const submitCustomer = (data) => {\r\n    if (associatedPropertiesPendingToAdd !== null) {\r\n      data.ownerProperties = associatedPropertiesPendingToAdd.ownerProperties;\r\n      data.tenantProperties = associatedPropertiesPendingToAdd.tenantProperties;\r\n    }\r\n    addCustomer(data);\r\n    reset();\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w=\"8rem\"\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<HiPlus fontSize=\"1.2rem\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button\"\r\n      >\r\n        Agregar\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Agregar cliente\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <form id=\"CustomerForm\" onSubmit={handleSubmit(submitCustomer)}>\r\n              <Stack spacing=\"14px\">\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerName\">Nombre</FormLabel>\r\n                  <Input\r\n                    {...register(\"name\", { required: \"Nombre es requerido.\" })}\r\n                    id=\"CustomerName\"\r\n                    placeholder=\"Ingresa el nombre\"\r\n                    autoComplete=\"off\"\r\n                  />\r\n                  {errors.name && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.name.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerEmail\">Email</FormLabel>\r\n                  <Input\r\n                    {...register(\"email\", { required: \"Email es requerido.\" })}\r\n                    id=\"CustomerEmail\"\r\n                    placeholder=\"Ingresa el email\"\r\n                    autoComplete=\"off\"\r\n                    type=\"email\"\r\n                  />\r\n                  {errors.email && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.email.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerPhone\">Teléfono</FormLabel>\r\n                  <Input\r\n                    {...register(\"phone\", {\r\n                      required: \"Teléfono es requerido.\",\r\n                    })}\r\n                    type=\"number\"\r\n                    id=\"CustomerPhone\"\r\n                    placeholder=\"Ingresa el télefono\"\r\n                    autoComplete=\"off\"\r\n                  />\r\n                  {errors.phone && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.phone.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerProperty\">Propiedades</FormLabel>\r\n                  <AssociateProperty />\r\n                </Box>\r\n              </Stack>\r\n            </form>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              form=\"CustomerForm\"\r\n              variant=\"confirm-add-button\"\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateCustomer;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { RiCloseCircleFill } from \"react-icons/ri\";\r\nimport PropertiesContext from \"../../context/Properties/PropertiesContext\";\r\n\r\nconst EditAssociateProperty = (props) => {\r\n  const { customer } = props;\r\n  const { setAssociatedPropertiesPendingToAdd } = useContext(CustomersContext);\r\n  const { properties } = useContext(PropertiesContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [propertyCode, setPropertyCode] = useState(\"\");\r\n  const [propertyType, setPropertyType] = useState(\"\");\r\n  const [associatedProperties, setAssociatedProperties] = useState([]);\r\n  const [showError, setShowError] = useState(false);\r\n  const [showErrorTypeIsRequired, setShowErrorTypeIsRequired] = useState(false);\r\n  const [showCustomerAlreadyHasThatProp, setShowCustomerAlreadyHasThatProp] =\r\n    useState(false);\r\n  const [showNoPropWithThatCodeError, setShowNoPropWithThatCodeError] =\r\n    useState(false);\r\n\r\n  const getCustomerProperties = () => {\r\n    let customerProperties = [];\r\n    customer.tenantProperties.map((property) => {\r\n      let prop = {\r\n        code: property.internalCode,\r\n        type: \"Inquilino\",\r\n      };\r\n      customerProperties.push(prop);\r\n    });\r\n    customer.ownerProperties.map((property) => {\r\n      let prop = {\r\n        code: property.internalCode,\r\n        type: \"Dueño\",\r\n      };\r\n      customerProperties.push(prop);\r\n    });\r\n    setAssociatedProperties(customerProperties);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomerProperties();\r\n  }, []);\r\n\r\n  const associateProperty = (data) => {\r\n    if (propertyCode.trim() != \"\") {\r\n      if (propertyType == \"\") {\r\n        setShowErrorTypeIsRequired(true);\r\n      } else {\r\n        setShowErrorTypeIsRequired(false);\r\n        if (\r\n          associatedProperties.find(\r\n            (property) => property.code === propertyCode\r\n          )\r\n        ) {\r\n          setShowCustomerAlreadyHasThatProp(true);\r\n        } else {\r\n          if (\r\n            properties.find(\r\n              (property) => property.internalCode === propertyCode\r\n            )\r\n          ) {\r\n            let property = {\r\n              code: propertyCode,\r\n              type: propertyType,\r\n            };\r\n            setAssociatedProperties([...associatedProperties, property]);\r\n            setPropertyCode(\"\");\r\n            setPropertyType(\"\");\r\n          } else {\r\n            setShowNoPropWithThatCodeError(true);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n  };\r\n\r\n  const removeAssociatedProperty = (propertyCode) => {\r\n    const newAssociatedProperties = associatedProperties.filter(\r\n      (property) => property.code != propertyCode\r\n    );\r\n    setAssociatedProperties(newAssociatedProperties);\r\n  };\r\n\r\n  const submitAssociateProperty = () => {\r\n    let ownerProperties = [];\r\n    let tenantProperties = [];\r\n    associatedProperties.forEach((property) => {\r\n      if (property.type === \"Dueño\") {\r\n        ownerProperties.push(property.code);\r\n      } else if (property.type === \"Inquilino\") {\r\n        tenantProperties.push(property.code);\r\n      }\r\n    });\r\n\r\n    const data = { ownerProperties, tenantProperties };\r\n    setAssociatedPropertiesPendingToAdd(data);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w={\"100%\"}\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<BsFillHouseDoorFill fontSize=\"18px\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button-clear\"\r\n      >\r\n        Asociar propiedades\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Asociar propiedades\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <Stack spacing=\"14px\">\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Código interno de la propiedad\r\n                </FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"CustomerProperty\"\r\n                  placeholder=\"Ingresa el código\"\r\n                  autoComplete=\"off\"\r\n                  value={propertyCode}\r\n                  onChange={(e) => {\r\n                    setPropertyCode(e.target.value);\r\n                    setShowError(false);\r\n                    setShowNoPropWithThatCodeError(false);\r\n                    setShowCustomerAlreadyHasThatProp(false);\r\n                  }}\r\n                />\r\n                <Badge\r\n                  display={showError ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El código interno es requerido.\r\n                </Badge>\r\n                <Badge\r\n                  whiteSpace=\"inital\"\r\n                  display={\r\n                    showCustomerAlreadyHasThatProp ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El cliente ya tiene esta propiedad registrada.\r\n                </Badge>\r\n                <Badge\r\n                  display={\r\n                    showNoPropWithThatCodeError ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  No hay propiedades con ese código.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Tipo de vínculo\r\n                </FormLabel>\r\n                <Select\r\n                  id=\"CustomerType\"\r\n                  placeholder=\"Selecciona el tipo\"\r\n                  value={propertyType}\r\n                  onChange={(event) => {\r\n                    setPropertyType(event.target.value);\r\n                    setShowErrorTypeIsRequired(false);\r\n                  }}\r\n                >\r\n                  <option value=\"Dueño\" selected>\r\n                    Dueño\r\n                  </option>\r\n                  <option value=\"Inquilino\">Inquilino</option>\r\n                </Select>\r\n                <Badge\r\n                  display={showErrorTypeIsRequired ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El tipo de vínculo es requerido.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  w=\"100%\"\r\n                  type=\"button\"\r\n                  form=\"CustomerPropertyForm\"\r\n                  variant=\"confirm-add-button\"\r\n                  onClick={() => associateProperty()}\r\n                >\r\n                  Agregar\r\n                </Button>\r\n              </Box>\r\n              {associatedProperties.map((property) => (\r\n                <Box\r\n                  key={property.code}\r\n                  bg=\"defaultColor.500\"\r\n                  w=\"100%\"\r\n                  borderRadius=\"7px\"\r\n                  py=\"0.4rem\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  gap=\"5px\"\r\n                  position=\"relative\"\r\n                >\r\n                  <Badge\r\n                    alignSelf=\"center\"\r\n                    position=\"absolute\"\r\n                    left=\"3\"\r\n                    fontSize=\"0.7rem\"\r\n                    borderRadius=\"7px\"\r\n                  >\r\n                    {property.type}\r\n                  </Badge>\r\n                  <Box>{property.code}</Box>\r\n                  <Box\r\n                    alignSelf=\"center\"\r\n                    cursor=\"pointer\"\r\n                    position=\"absolute\"\r\n                    right=\"3\"\r\n                    onClick={() => removeAssociatedProperty(property.code)}\r\n                  >\r\n                    <RiCloseCircleFill fontSize=\"1.2rem\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"confirm-add-button\"\r\n              onClick={() => submitAssociateProperty()}\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditAssociateProperty;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FaUserEdit } from \"react-icons/fa\";\r\nimport EditAssociateProperty from \"./EditAssociateProperty\";\r\n\r\nconst EditCustomer = (props) => {\r\n  const { editCustomer, associatedPropertiesPendingToAdd } =\r\n    useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { customer, direction } = props;\r\n  const [reactiveCustomer, setReactiveCustomer] = useState(customer);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  const submitCustomer = (data) => {\r\n    if (associatedPropertiesPendingToAdd !== null) {\r\n      data.ownerProperties = associatedPropertiesPendingToAdd.ownerProperties;\r\n      data.tenantProperties = associatedPropertiesPendingToAdd.tenantProperties;\r\n    }\r\n    editCustomer(data, customer._id);\r\n    reset();\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setReactiveCustomer(customer);\r\n  }, [customer]);\r\n\r\n  return (\r\n    <>\r\n      <FaUserEdit onClick={onOpen} cursor=\"pointer\" fontSize=\"1.3rem\" />\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement={direction ? direction : \"right\"}\r\n        onClose={onClose}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Editar cliente\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <form id=\"CustomerEditForm\" onSubmit={handleSubmit(submitCustomer)}>\r\n              <Stack spacing=\"14px\">\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerName\">Nombre</FormLabel>\r\n                  <Input\r\n                    {...register(\"name\", { required: \"Nombre es requerido.\" })}\r\n                    id=\"CustomerName\"\r\n                    placeholder=\"Ingresa el nombre\"\r\n                    autoComplete=\"off\"\r\n                    value={reactiveCustomer.name}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        name: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.name && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.name.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerEmail\">Email</FormLabel>\r\n                  <Input\r\n                    {...register(\"email\", { required: \"Email es requerido.\" })}\r\n                    id=\"CustomerEmail\"\r\n                    placeholder=\"Ingresa el email\"\r\n                    autoComplete=\"off\"\r\n                    type=\"email\"\r\n                    value={reactiveCustomer.email}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        email: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.email && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.email.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerPhone\">Teléfono</FormLabel>\r\n                  <Input\r\n                    {...register(\"phone\", {\r\n                      required: \"Teléfono es requerido.\",\r\n                    })}\r\n                    type=\"number\"\r\n                    id=\"CustomerPhone\"\r\n                    placeholder=\"Ingresa el télefono\"\r\n                    autoComplete=\"off\"\r\n                    value={reactiveCustomer.phone}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        phone: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.phone && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.phone.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerProperty\">Propiedades</FormLabel>\r\n                  <EditAssociateProperty\r\n                    customer={customer}\r\n                    customerHaveProperties={customer.ownerProperties.concat(\r\n                      customer.tenantProperties\r\n                    )}\r\n                  />\r\n                </Box>\r\n              </Stack>\r\n            </form>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button variant=\"cancel-action\" mr={3} onClick={onClose}>\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              form=\"CustomerEditForm\"\r\n              variant=\"confirm-add-button\"\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCustomer;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  HStack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport CreateCustomer from \"../components/Customers/CreateCustomer\";\r\nimport CustomersContext from \"../context/Customers/CustomersContext\";\r\nimport Loader from \"../components/Other/Loader/Loader\";\r\nimport EditCustomer from \"../components/Customers/EditCustomer\";\r\nimport ConfirmDelete from \"../components/Other/ConfirmDelete\";\r\nimport ViewCustomerProperties from \"../components/Customers/ViewCustomerProperties\";\r\nimport Search from \"../components/Other/Search\";\r\n\r\nconst CustomersPage = () => {\r\n  const { customers, deleteCustomer, customersAreLoading } =\r\n    useContext(CustomersContext);\r\n  const [filteredCustomers, setFilteredCustomers] = useState(customers);\r\n\r\n  useEffect(() => {\r\n    setFilteredCustomers(customers);\r\n  }, [customers]);\r\n\r\n  const getCustomerProperties = (customer) => {\r\n    let properties = customer.ownerProperties.concat(customer.tenantProperties);\r\n    if (properties.length > 0) {\r\n      let ownerProperties = customer.ownerProperties;\r\n      let tenantProperties = customer.tenantProperties;\r\n      return (\r\n        <ViewCustomerProperties\r\n          ownerProperties={ownerProperties}\r\n          tenantProperties={tenantProperties}\r\n          customer={customer}\r\n        />\r\n      );\r\n    } else {\r\n      return <Text>Sin propiedades</Text>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box ml=\"1rem\" display=\"flex\" justifyContent=\"end\">\r\n        <Search\r\n          placeHolder=\"Busca clientes según nombre, email y teléfono...\"\r\n          listToFilter={customers}\r\n          filters={[\"name\", \"email\", \"phone\"]}\r\n          listSetter={setFilteredCustomers}\r\n        />\r\n        <CreateCustomer />\r\n      </Box>\r\n      {customersAreLoading == true ? (\r\n        <Box\r\n          h=\"100%\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Loader />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {customers && (\r\n            <Table variant=\"unstyled\" size=\"sm\">\r\n              {filteredCustomers.length > 0 && (\r\n                <Thead>\r\n                  <Tr maxWidth=\"100%\">\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Nombre\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Email\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Telefono\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Propiedades\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"60px\">\r\n                      Acciones\r\n                    </Th>\r\n                  </Tr>\r\n                </Thead>\r\n              )}\r\n\r\n              <Tbody>\r\n                {filteredCustomers.map((customer) => (\r\n                  <Tr key={customer._id}>\r\n                    <Td textAlign=\"center\" maxWidth=\"70px\">\r\n                      {customer.name}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"80px\">\r\n                      {customer.email}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"50px\">\r\n                      {customer.phone}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"60px\">\r\n                      {getCustomerProperties(customer)}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"70px\">\r\n                      <HStack justifyContent=\"center\">\r\n                        <EditCustomer customer={customer} />\r\n                        <Box pb=\"0rem\" textAlign=\"center\" fontWeight=\"500\">\r\n                          <ConfirmDelete\r\n                            text=\"¿Estás seguro de que deseas eliminar este cliente?\"\r\n                            name=\"cliente\"\r\n                            onlyIcon=\"yes\"\r\n                            icon=\"userIcon\"\r\n                            noMarginTopInIcon=\"yes\"\r\n                            functionToExecute={deleteCustomer}\r\n                            element={customer}\r\n                          />\r\n                        </Box>\r\n                      </HStack>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            </Table>\r\n          )}\r\n          {customers.length === 0 && (\r\n            <Text\r\n              fontSize=\"xl\"\r\n              color=\"#000\"\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              h=\"100%\"\r\n              w=\"100%\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              mt=\"-5rem\"\r\n              zIndex=\"-10\"\r\n            >\r\n              El sistema aún no cuenta con clientes registrados.\r\n            </Text>\r\n          )}\r\n          {filteredCustomers.length === 0 && customers.length !== 0 && (\r\n            <Text\r\n              fontSize=\"xl\"\r\n              color=\"#000\"\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              w=\"100%\"\r\n              h=\"100%\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              mt=\"-5rem\"\r\n            >\r\n              No se encontraron clientes que coincidan con tu búsqueda.\r\n            </Text>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomersPage;\r\n"],"sourceRoot":""}
========
{"version":3,"sources":["components/Properties/CopyInternalCode.jsx","components/Other/Loader/Loader.jsx","components/Other/ConfirmDelete.jsx","components/Properties/Property/Card/BadgePropertyCard.jsx","components/Other/Search.jsx","components/Customers/ViewCustomerProperties.jsx","components/Customers/AssociateProperty.jsx","components/Customers/CreateCustomer.jsx","components/Customers/EditAssociateProperty.jsx","components/Customers/EditCustomer.jsx","pages/Customers.jsx"],"names":["CopyInternalCode","props","internalCode","noMarginLeft","text","iconSize","notification","useToast","toastId","display","justifyContent","ml","hasArrow","label","bg","mt","cursor","onClick","isActive","id","title","description","status","duration","position","isClosable","navigator","clipboard","writeText","notificationAndCopyToClipboard","alignSelf","fontSize","Loader","color","className","ConfirmDelete","functionToExecute","topText","element","name","onlyText","anotherElement","onlyIcon","icon","noMarginTopInIcon","useDisclosure","isOpen","onOpen","onClose","w","_hover","background","_active","boxShadow","_focus","pt","mr","variant","motionPreset","isCentered","fontWeight","BadgePropertyCard","bgColor","borderRadius","px","py","alignItems","Search","listToFilter","filters","listSetter","placeHolder","normalize","value","String","replace","toLowerCase","filterData","searchText","filteredList","filter","item","splittedFilter","split","property","length","includes","pointerEvents","children","onChange","e","st","target","border","placeholder","ViewCustomerProperties","customer","reportButton","parsePropertyType","propertyType","textTransform","size","h","mb","pb","p","spacing","height","textAlign","orientation","ownerProperties","map","type","slice","concat","_id","tenantProperties","AssociateProperty","setAssociatedPropertiesPendingToAdd","useContext","CustomersContext","properties","PropertiesContext","useState","propertyCode","setPropertyCode","setPropertyType","associatedProperties","setAssociatedProperties","showError","setShowError","showErrorTypeIsRequired","setShowErrorTypeIsRequired","showCustomerAlreadyHasThatProp","setShowCustomerAlreadyHasThatProp","showNoPropWithThatCodeError","setShowNoPropWithThatCodeError","leftIcon","placement","borderLeft","borderStartStartRadius","borderEndStartRadius","borderBottomWidth","htmlFor","autoComplete","whiteSpace","event","selected","form","data","trim","find","code","associateProperty","gap","left","right","newAssociatedProperties","removeAssociatedProperty","borderTopWidth","forEach","push","submitAssociateProperty","CreateCustomer","addCustomer","associatedPropertiesPendingToAdd","useForm","register","handleSubmit","errors","formState","reset","onSubmit","required","message","email","phone","EditAssociateProperty","useEffect","customerProperties","prop","getCustomerProperties","EditCustomer","editCustomer","direction","reactiveCustomer","setReactiveCustomer","customerHaveProperties","CustomersPage","customers","deleteCustomer","customersAreLoading","filteredCustomers","setFilteredCustomers","maxWidth","zIndex"],"mappings":"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","file":"static/js/10.70d0fcac.chunk.js","sourcesContent":["import { Box, Tooltip, useToast } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { IoMdCopy } from \"react-icons/io\";\r\n\r\nconst CopyInternalCode = (props) => {\r\n  const { internalCode, noMarginLeft, text, iconSize } = props;\r\n  const notification = useToast();\r\n  const toastId = internalCode;\r\n\r\n  const notificationAndCopyToClipboard = () => {\r\n    if (!notification.isActive(toastId)) {\r\n      notification({\r\n        id: toastId,\r\n        title: `Código de ${text} copiado al portapapeles`,\r\n        description: `Has copiado el código ${internalCode}`,\r\n        status: \"success\",\r\n        duration: 4000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n    }\r\n    navigator.clipboard?.writeText(internalCode);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"center\" ml={noMarginLeft ? 0 : 1.5}>\r\n        {internalCode}\r\n        <Tooltip\r\n          hasArrow\r\n          label=\"Copiar código al portapapeles\"\r\n          bg=\"defaultColor.500\"\r\n          mt=\"0.2rem\"\r\n        >\r\n          <Box\r\n            cursor=\"pointer\"\r\n            onClick={() => {\r\n              notificationAndCopyToClipboard();\r\n            }}\r\n            alignSelf=\"center\"\r\n            ml=\"0.4rem\"\r\n          >\r\n            <IoMdCopy fontSize={iconSize ? iconSize : null} />\r\n          </Box>\r\n        </Tooltip>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyInternalCode;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport \"./loader.css\";\r\n\r\nconst Loader = (props) => {\r\n  const { color } = props;\r\n  return (\r\n    <>\r\n      <Box\r\n        color={color == \"white\" ? \"#fff !important\" : \"#304580\"}\r\n        className=\"loader\"\r\n      ></Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Button,\r\n  Text,\r\n  useDisclosure,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { FaTrashAlt, FaUserMinus } from \"react-icons/fa\";\r\nimport React from \"react\";\r\n\r\nconst ConfirmDelete = (props) => {\r\n  const {\r\n    functionToExecute,\r\n    text,\r\n    topText,\r\n    element,\r\n    name,\r\n    onlyText,\r\n    anotherElement,\r\n    onlyIcon,\r\n    icon,\r\n    noMarginTopInIcon,\r\n  } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const execute = () => {\r\n    onClose();\r\n    functionToExecute(element, anotherElement ? anotherElement : null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {onlyIcon ? (\r\n        <Box onClick={onOpen} mt={noMarginTopInIcon ? \"0\" : \"7px\"} ml=\"6.5px\">\r\n          {icon === \"userIcon\" ? (\r\n            <FaUserMinus fontSize=\"1.3rem\" cursor=\"pointer\" />\r\n          ) : (\r\n            <FaTrashAlt fontSize=\"0.9rem\" />\r\n          )}\r\n        </Box>\r\n      ) : onlyText ? (\r\n        <Button\r\n          w=\"100%\"\r\n          bg=\"none\"\r\n          _hover={{ background: \"none\" }}\r\n          onClick={onOpen}\r\n          _active={{ boxShadow: \"none\" }}\r\n          _focus={{ boxShadow: \"none\" }}\r\n        >\r\n          <Text pt=\"0.7rem\">Eliminar</Text>\r\n        </Button>\r\n      ) : (\r\n        <Button mr=\"0.8rem\" w=\"10rem\" onClick={onOpen} variant=\"delete-button\">\r\n          <Text>Eliminar propiedad</Text>\r\n        </Button>\r\n      )}\r\n\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n        <AlertDialogContent bg=\"defaultColor.400\" color=\"#fff\">\r\n          <AlertDialogHeader>Eliminar {name}</AlertDialogHeader>\r\n          <AlertDialogCloseButton mt=\"0.5rem\" _focus={{ boxShadow: \"none\" }} />\r\n          <AlertDialogBody>\r\n            <Box mt=\"-2\" fontWeight=\"500\" fontSize=\"0.95rem\">\r\n              {topText}\r\n            </Box>\r\n            <Box mt=\"2\">{text}</Box>\r\n          </AlertDialogBody>\r\n          <AlertDialogFooter>\r\n            <Button variant=\"cancel-action\" onClick={onClose}>\r\n              No\r\n            </Button>\r\n            <Button variant=\"delete-button\" onClick={() => execute()} ml={3}>\r\n              Confirmar\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React from \"react\";\r\nimport { Box, Badge } from \"@chakra-ui/react\";\r\n\r\nconst BadgePropertyCard = (props) => {\r\n  const { title, icon, bgColor } = props;\r\n\r\n  return (\r\n    <Badge\r\n      w=\"auto\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"7px\"\r\n      ml=\"-0.5\"\r\n      px=\"2\"\r\n      py=\"0.5\"\r\n      bg={bgColor ? bgColor : \"defaultColor.400\"}\r\n      color=\"#fff\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Box mr=\"1\" fontSize=\"0.9rem\">\r\n        {icon}\r\n      </Box>\r\n      <Box>{title}</Box>\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default BadgePropertyCard;\r\n","import { Input, InputGroup, InputLeftElement } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\nconst Search = (props) => {\r\n  const { listToFilter, filters, listSetter, placeHolder } = props;\r\n\r\n  let normalize = (value) => {\r\n    return String(value)\r\n      .normalize(\"NFD\")\r\n      .replace(/[\\u0300-\\u036f]/g, \"\")\r\n      .toLowerCase();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const st = normalize(e.target.value);\r\n    if (st !== \"\") {\r\n      filterData(st);\r\n    } else {\r\n      listSetter(listToFilter);\r\n    }\r\n  };\r\n\r\n  const filterData = (searchText) => {\r\n    const filteredList = listToFilter.filter((item) => {\r\n      for (const filter of filters) {\r\n        const splittedFilter = filter.split(\".\");\r\n        let property = item[splittedFilter[0]];\r\n        if (splittedFilter.length > 1) {\r\n          property = property[splittedFilter[1]];\r\n        }\r\n        if (normalize(property).includes(searchText)) {\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n    listSetter(filteredList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputGroup>\r\n        <InputLeftElement\r\n          pointerEvents=\"none\"\r\n          children={<FaSearch color=\"#304580\" />}\r\n        />\r\n        <Input\r\n          onChange={handleChange}\r\n          border=\"2px solid #304580\"\r\n          placeholder={placeHolder}\r\n          mr=\"1rem\"\r\n        ></Input>\r\n      </InputGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  Tooltip,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { BsHouseDoorFill } from \"react-icons/bs\";\r\nimport { FaWarehouse } from \"react-icons/fa\";\r\nimport { MdApartment } from \"react-icons/md\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport BadgePropertyCard from \"../Properties/Property/Card/BadgePropertyCard\";\r\nimport CopyInternalCode from \"../Properties/CopyInternalCode\";\r\n\r\nconst ViewCustomerProperties = (props) => {\r\n  const { customer, reportButton } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const parsePropertyType = (propertyType) => {\r\n    if (propertyType[0] === \"Casa\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Casa\"\r\n          icon={<BsHouseDoorFill />}\r\n        />\r\n      );\r\n    } else if (propertyType[0] === \"Apartamento\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Apartamento\"\r\n          icon={<MdApartment />}\r\n        />\r\n      );\r\n    } else if (propertyType[0] === \"Depósito\") {\r\n      return (\r\n        <BadgePropertyCard\r\n          bgColor=\"defaultColor.500\"\r\n          title=\"Depósito\"\r\n          icon={<FaWarehouse />}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        {reportButton ? (\r\n          <Button\r\n            mt=\"0.8rem\"\r\n            w=\"100%\"\r\n            fontSize=\"0.8rem\"\r\n            fontWeight=\"bold\"\r\n            textTransform=\"uppercase\"\r\n            justifyContent=\"center\"\r\n            borderRadius=\"7px\"\r\n            bg=\"defaultColor.500\"\r\n            color=\"#fff\"\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            onClick={onOpen}\r\n            variant=\"reports-button\"\r\n          >\r\n            <BsFillHouseDoorFill fontSize=\"15px\" />\r\n            <Text ml=\"0.5rem\">Ver propiedades</Text>\r\n          </Button>\r\n        ) : (\r\n          <Badge\r\n            fontSize=\"0.7rem\"\r\n            fontWeight=\"bold\"\r\n            color=\"white\"\r\n            bgColor=\"defaultColor.400\"\r\n            boxShadow=\"base\"\r\n            borderRadius=\"15px\"\r\n            px={2}\r\n            py={1}\r\n            display=\"flex\"\r\n            onClick={onOpen}\r\n            cursor=\"pointer\"\r\n          >\r\n            <BsFillHouseDoorFill fontSize=\"15px\" />\r\n            <Text ml=\"0.5rem\">Ver propiedades</Text>\r\n          </Badge>\r\n        )}\r\n      </Box>\r\n      <Modal\r\n        size=\"5xl\"\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        isCentered\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay alignItems=\"center\" h=\"100vh !important\" />\r\n        <ModalContent bg=\"defaultColor.400\" color=\"#fff\">\r\n          <ModalHeader fontSize=\"1.1rem\" mb=\"0\" pb=\"0\" pt=\"0.7rem\">\r\n            <Box>\r\n              <Box>Propiedades de {customer.name}</Box>\r\n            </Box>\r\n          </ModalHeader>\r\n          <ModalCloseButton _focus={{ boxShadow: \"none\" }} onClick={onClose} />\r\n          <ModalBody pb=\"1.5rem\">\r\n            <Box position=\"relative\">\r\n              <Box\r\n                display=\"flex\"\r\n                bg=\"defaultColor.500\"\r\n                p=\"3\"\r\n                borderRadius=\"7px\"\r\n                alignItems=\"center\"\r\n                mb=\"4\"\r\n              >\r\n                <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                  <>\r\n                    <Box w=\"13%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">C. Interno</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"15%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Tipo</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Nombre</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Descripción</Text>\r\n                    </Box>\r\n                    <Divider orientation=\"vertical\" />\r\n                    <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                      <Text fontWeight=\"500\">Vínculo</Text>\r\n                    </Box>\r\n                  </>\r\n                </HStack>\r\n              </Box>\r\n              {customer.ownerProperties.length > 0 &&\r\n                customer.ownerProperties.map((property) => (\r\n                  <Box\r\n                    key={property._id}\r\n                    display=\"flex\"\r\n                    bg=\"defaultColor.300\"\r\n                    p=\"3\"\r\n                    borderRadius=\"7px\"\r\n                    alignItems=\"center\"\r\n                    mb=\"4\"\r\n                  >\r\n                    <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                      <>\r\n                        <Box w=\"12%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <CopyInternalCode\r\n                            text=\"propiedad\"\r\n                            internalCode={\r\n                              property.internalCode\r\n                                ? property.internalCode\r\n                                : \"CÓDIGO\"\r\n                            }\r\n                          />\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"15%\" px=\"0rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box>{parsePropertyType(property.type)}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          {property.name.length > 17 ? (\r\n                            <Tooltip\r\n                              hasArrow\r\n                              label={property.name}\r\n                              bg=\"defaultColor.500\"\r\n                            >\r\n                              <Box>\r\n                                {property.name\r\n                                  .slice(0, 17)\r\n                                  .concat(\"...\")}\r\n                              </Box>\r\n                            </Tooltip>\r\n                          ) : (\r\n                            <Box>{property.name}</Box>\r\n                          )}\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          {property.description.length > 38 ? (\r\n                            <Tooltip\r\n                              hasArrow\r\n                              label={property.description}\r\n                              bg=\"defaultColor.500\"\r\n                            >\r\n                              <Box>\r\n                                {property.description\r\n                                  .slice(0, 38)\r\n                                  .concat(\"...\")}\r\n                              </Box>\r\n                            </Tooltip>\r\n                          ) : (\r\n                            <Box>{property.description}</Box>\r\n                          )}\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0.5rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box>\r\n                            <Badge\r\n                              w=\"auto\"\r\n                              justifyContent=\"center\"\r\n                              borderRadius=\"7px\"\r\n                              ml=\"-0.5\"\r\n                              px=\"2\"\r\n                              py=\"0.5\"\r\n                              bg=\"defaultColor.500\"\r\n                              color=\"#fff\"\r\n                              display=\"flex\"\r\n                              alignItems=\"center\"\r\n                            >\r\n                              Dueño\r\n                            </Badge>\r\n                          </Box>\r\n                        </Box>\r\n                        {/* <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <PropertyDetails\r\n                            propertyName={property.name}\r\n                            property={property}\r\n                          />\r\n                        </Box> */}\r\n                      </>\r\n                    </HStack>\r\n                  </Box>\r\n                ))}\r\n              {customer.tenantProperties.length > 0 &&\r\n                customer.tenantProperties.map((property) => (\r\n                  <Box\r\n                    key={property._id}\r\n                    display=\"flex\"\r\n                    bg=\"defaultColor.300\"\r\n                    p=\"3\"\r\n                    borderRadius=\"7px\"\r\n                    alignItems=\"center\"\r\n                    mb=\"4\"\r\n                  >\r\n                    <HStack w=\"100%\" spacing=\"13px\" height=\"25px\">\r\n                      <>\r\n                        <Box w=\"12%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <CopyInternalCode\r\n                            text=\"propiedad\"\r\n                            internalCode={\r\n                              property.internalCode\r\n                                ? property.internalCode\r\n                                : \"CÓDIGO\"\r\n                            }\r\n                          />\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">\r\n                            {parsePropertyType(property.type)}\r\n                          </Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"20%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">{property.name}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"43%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">{property.description}</Box>\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box w=\"10%\" px=\"0.5rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <Box fontWeight=\"500\">\r\n                            <Badge\r\n                              w=\"auto\"\r\n                              justifyContent=\"center\"\r\n                              borderRadius=\"7px\"\r\n                              ml=\"-0.5\"\r\n                              px=\"1\"\r\n                              py=\"0.5\"\r\n                              bg=\"defaultColor.500\"\r\n                              color=\"#fff\"\r\n                              display=\"flex\"\r\n                              alignItems=\"center\"\r\n                            >\r\n                              Inquilino\r\n                            </Badge>\r\n                          </Box>\r\n                        </Box>\r\n                        {/* <Box w=\"10%\" px=\"1rem\" py=\"0.5\" textAlign=\"center\">\r\n                          <PropertyDetails\r\n                            propertyName={property.name}\r\n                            property={property}\r\n                          />\r\n                        </Box> */}\r\n                      </>\r\n                    </HStack>\r\n                  </Box>\r\n                ))}\r\n            </Box>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewCustomerProperties;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { RiCloseCircleFill } from \"react-icons/ri\";\r\nimport PropertiesContext from \"../../context/Properties/PropertiesContext\";\r\n\r\nconst AssociateProperty = (props) => {\r\n  const { setAssociatedPropertiesPendingToAdd } = useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { properties } = useContext(PropertiesContext);\r\n  const [propertyCode, setPropertyCode] = useState(\"\");\r\n  const [propertyType, setPropertyType] = useState(\"\");\r\n  const [associatedProperties, setAssociatedProperties] = useState([]);\r\n  const [showError, setShowError] = useState(false);\r\n  const [showErrorTypeIsRequired, setShowErrorTypeIsRequired] = useState(false);\r\n  const [showCustomerAlreadyHasThatProp, setShowCustomerAlreadyHasThatProp] =\r\n    useState(false);\r\n  const [showNoPropWithThatCodeError, setShowNoPropWithThatCodeError] =\r\n    useState(false);\r\n\r\n  const associateProperty = (data) => {\r\n    if (propertyCode.trim() != \"\") {\r\n      if (propertyType == \"\") {\r\n        setShowErrorTypeIsRequired(true);\r\n      } else {\r\n        setShowErrorTypeIsRequired(false);\r\n        if (\r\n          associatedProperties.find(\r\n            (property) => property.code === propertyCode\r\n          )\r\n        ) {\r\n          setShowCustomerAlreadyHasThatProp(true);\r\n        } else {\r\n          if (\r\n            properties.find(\r\n              (property) => property.internalCode === propertyCode\r\n            )\r\n          ) {\r\n            let property = {\r\n              code: propertyCode,\r\n              type: propertyType,\r\n            };\r\n            setAssociatedProperties([...associatedProperties, property]);\r\n            setPropertyCode(\"\");\r\n            setPropertyType(\"\");\r\n          } else {\r\n            setShowNoPropWithThatCodeError(true);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n  };\r\n\r\n  const removeAssociatedProperty = (propertyCode) => {\r\n    const newAssociatedProperties = associatedProperties.filter(\r\n      (property) => property.code != propertyCode\r\n    );\r\n    setAssociatedProperties(newAssociatedProperties);\r\n  };\r\n\r\n  const submitAssociateProperty = () => {\r\n    let ownerProperties = [];\r\n    let tenantProperties = [];\r\n    associatedProperties.forEach((property) => {\r\n      if (property.type === \"Dueño\") {\r\n        ownerProperties.push(property.code);\r\n      } else if (property.type === \"Inquilino\") {\r\n        tenantProperties.push(property.code);\r\n      }\r\n    });\r\n\r\n    const data = { ownerProperties, tenantProperties };\r\n    setAssociatedPropertiesPendingToAdd(data);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w={\"100%\"}\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<BsFillHouseDoorFill fontSize=\"18px\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button-clear\"\r\n      >\r\n        Asociar propiedades\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Asociar propiedades\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <Stack spacing=\"14px\">\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Código interno de la propiedad\r\n                </FormLabel>\r\n                <Input\r\n                  id=\"CustomerProperty\"\r\n                  placeholder=\"Ingresa el código\"\r\n                  autoComplete=\"off\"\r\n                  type=\"number\"\r\n                  value={propertyCode}\r\n                  onChange={(e) => {\r\n                    setPropertyCode(e.target.value);\r\n                    setShowError(false);\r\n                    setShowNoPropWithThatCodeError(false);\r\n                    setShowCustomerAlreadyHasThatProp(false);\r\n                  }}\r\n                />\r\n                <Badge\r\n                  display={showError ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El código interno es requerido.\r\n                </Badge>\r\n                <Badge\r\n                  whiteSpace=\"inital\"\r\n                  display={\r\n                    showCustomerAlreadyHasThatProp ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El cliente ya tiene esta propiedad registrada.\r\n                </Badge>\r\n                <Badge\r\n                  display={\r\n                    showNoPropWithThatCodeError ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  No hay propiedades con ese código.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Tipo de vínculo\r\n                </FormLabel>\r\n                <Select\r\n                  id=\"CustomerType\"\r\n                  placeholder=\"Selecciona el tipo\"\r\n                  value={propertyType}\r\n                  onChange={(event) => {\r\n                    setPropertyType(event.target.value);\r\n                    setShowErrorTypeIsRequired(false);\r\n                  }}\r\n                >\r\n                  <option value=\"Dueño\" selected>\r\n                    Dueño\r\n                  </option>\r\n                  <option value=\"Inquilino\">Inquilino</option>\r\n                </Select>\r\n                <Badge\r\n                  display={showErrorTypeIsRequired ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El tipo de vínculo es requerido.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  w=\"100%\"\r\n                  type=\"button\"\r\n                  form=\"CustomerPropertyForm\"\r\n                  variant=\"confirm-add-button\"\r\n                  onClick={() => associateProperty()}\r\n                >\r\n                  Agregar\r\n                </Button>\r\n              </Box>\r\n              {associatedProperties.map((property) => (\r\n                <Box\r\n                  key={property.code}\r\n                  bg=\"defaultColor.500\"\r\n                  w=\"100%\"\r\n                  borderRadius=\"7px\"\r\n                  py=\"0.4rem\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  gap=\"5px\"\r\n                  position=\"relative\"\r\n                >\r\n                  <Badge\r\n                    alignSelf=\"center\"\r\n                    position=\"absolute\"\r\n                    left=\"3\"\r\n                    fontSize=\"0.7rem\"\r\n                    borderRadius=\"7px\"\r\n                  >\r\n                    {property.type}\r\n                  </Badge>\r\n                  <Box>{property.code}</Box>\r\n                  <Box\r\n                    alignSelf=\"center\"\r\n                    cursor=\"pointer\"\r\n                    position=\"absolute\"\r\n                    right=\"3\"\r\n                    onClick={() => removeAssociatedProperty(property.code)}\r\n                  >\r\n                    <RiCloseCircleFill fontSize=\"1.2rem\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"confirm-add-button\"\r\n              onClick={() => submitAssociateProperty()}\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssociateProperty;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { HiPlus } from \"react-icons/hi\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport AssociateProperty from \"./AssociateProperty\";\r\n\r\nconst CreateCustomer = (props) => {\r\n  const { addCustomer, associatedPropertiesPendingToAdd } =\r\n    useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [customerType, setCustomerType] = useState(\"\");\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  const submitCustomer = (data) => {\r\n    if (associatedPropertiesPendingToAdd !== null) {\r\n      data.ownerProperties = associatedPropertiesPendingToAdd.ownerProperties;\r\n      data.tenantProperties = associatedPropertiesPendingToAdd.tenantProperties;\r\n    }\r\n    addCustomer(data);\r\n    reset();\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w=\"8rem\"\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<HiPlus fontSize=\"1.2rem\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button\"\r\n      >\r\n        Agregar\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Agregar cliente\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <form id=\"CustomerForm\" onSubmit={handleSubmit(submitCustomer)}>\r\n              <Stack spacing=\"14px\">\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerName\">Nombre</FormLabel>\r\n                  <Input\r\n                    {...register(\"name\", { required: \"Nombre es requerido.\" })}\r\n                    id=\"CustomerName\"\r\n                    placeholder=\"Ingresa el nombre\"\r\n                    autoComplete=\"off\"\r\n                  />\r\n                  {errors.name && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.name.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerEmail\">Email</FormLabel>\r\n                  <Input\r\n                    {...register(\"email\", { required: \"Email es requerido.\" })}\r\n                    id=\"CustomerEmail\"\r\n                    placeholder=\"Ingresa el email\"\r\n                    autoComplete=\"off\"\r\n                    type=\"email\"\r\n                  />\r\n                  {errors.email && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.email.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerPhone\">Teléfono</FormLabel>\r\n                  <Input\r\n                    {...register(\"phone\", {\r\n                      required: \"Teléfono es requerido.\",\r\n                    })}\r\n                    type=\"number\"\r\n                    id=\"CustomerPhone\"\r\n                    placeholder=\"Ingresa el télefono\"\r\n                    autoComplete=\"off\"\r\n                  />\r\n                  {errors.phone && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.phone.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerProperty\">Propiedades</FormLabel>\r\n                  <AssociateProperty />\r\n                </Box>\r\n              </Stack>\r\n            </form>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              form=\"CustomerForm\"\r\n              variant=\"confirm-add-button\"\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateCustomer;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { RiCloseCircleFill } from \"react-icons/ri\";\r\nimport PropertiesContext from \"../../context/Properties/PropertiesContext\";\r\n\r\nconst EditAssociateProperty = (props) => {\r\n  const { customer } = props;\r\n  const { setAssociatedPropertiesPendingToAdd } = useContext(CustomersContext);\r\n  const { properties } = useContext(PropertiesContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [propertyCode, setPropertyCode] = useState(\"\");\r\n  const [propertyType, setPropertyType] = useState(\"\");\r\n  const [associatedProperties, setAssociatedProperties] = useState([]);\r\n  const [showError, setShowError] = useState(false);\r\n  const [showErrorTypeIsRequired, setShowErrorTypeIsRequired] = useState(false);\r\n  const [showCustomerAlreadyHasThatProp, setShowCustomerAlreadyHasThatProp] =\r\n    useState(false);\r\n  const [showNoPropWithThatCodeError, setShowNoPropWithThatCodeError] =\r\n    useState(false);\r\n\r\n  const getCustomerProperties = () => {\r\n    let customerProperties = [];\r\n    customer.tenantProperties.map((property) => {\r\n      let prop = {\r\n        code: property.internalCode,\r\n        type: \"Inquilino\",\r\n      };\r\n      customerProperties.push(prop);\r\n    });\r\n    customer.ownerProperties.map((property) => {\r\n      let prop = {\r\n        code: property.internalCode,\r\n        type: \"Dueño\",\r\n      };\r\n      customerProperties.push(prop);\r\n    });\r\n    setAssociatedProperties(customerProperties);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCustomerProperties();\r\n  }, []);\r\n\r\n  const associateProperty = (data) => {\r\n    if (propertyCode.trim() != \"\") {\r\n      if (propertyType == \"\") {\r\n        setShowErrorTypeIsRequired(true);\r\n      } else {\r\n        setShowErrorTypeIsRequired(false);\r\n        if (\r\n          associatedProperties.find(\r\n            (property) => property.code === propertyCode\r\n          )\r\n        ) {\r\n          setShowCustomerAlreadyHasThatProp(true);\r\n        } else {\r\n          if (\r\n            properties.find(\r\n              (property) => property.internalCode === propertyCode\r\n            )\r\n          ) {\r\n            let property = {\r\n              code: propertyCode,\r\n              type: propertyType,\r\n            };\r\n            setAssociatedProperties([...associatedProperties, property]);\r\n            setPropertyCode(\"\");\r\n            setPropertyType(\"\");\r\n          } else {\r\n            setShowNoPropWithThatCodeError(true);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n  };\r\n\r\n  const removeAssociatedProperty = (propertyCode) => {\r\n    const newAssociatedProperties = associatedProperties.filter(\r\n      (property) => property.code != propertyCode\r\n    );\r\n    setAssociatedProperties(newAssociatedProperties);\r\n  };\r\n\r\n  const submitAssociateProperty = () => {\r\n    let ownerProperties = [];\r\n    let tenantProperties = [];\r\n    associatedProperties.forEach((property) => {\r\n      if (property.type === \"Dueño\") {\r\n        ownerProperties.push(property.code);\r\n      } else if (property.type === \"Inquilino\") {\r\n        tenantProperties.push(property.code);\r\n      }\r\n    });\r\n\r\n    const data = { ownerProperties, tenantProperties };\r\n    setAssociatedPropertiesPendingToAdd(data);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        w={\"100%\"}\r\n        onClick={onOpen}\r\n        fontSize=\"15px\"\r\n        leftIcon={<BsFillHouseDoorFill fontSize=\"18px\" />}\r\n        mr={5}\r\n        mb={5}\r\n        borderRadius=\"9px\"\r\n        variant=\"add-button-clear\"\r\n      >\r\n        Asociar propiedades\r\n      </Button>\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Asociar propiedades\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <Stack spacing=\"14px\">\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Código interno de la propiedad\r\n                </FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  id=\"CustomerProperty\"\r\n                  placeholder=\"Ingresa el código\"\r\n                  autoComplete=\"off\"\r\n                  value={propertyCode}\r\n                  onChange={(e) => {\r\n                    setPropertyCode(e.target.value);\r\n                    setShowError(false);\r\n                    setShowNoPropWithThatCodeError(false);\r\n                    setShowCustomerAlreadyHasThatProp(false);\r\n                  }}\r\n                />\r\n                <Badge\r\n                  display={showError ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El código interno es requerido.\r\n                </Badge>\r\n                <Badge\r\n                  whiteSpace=\"inital\"\r\n                  display={\r\n                    showCustomerAlreadyHasThatProp ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El cliente ya tiene esta propiedad registrada.\r\n                </Badge>\r\n                <Badge\r\n                  display={\r\n                    showNoPropWithThatCodeError ? \"inline-block\" : \"none\"\r\n                  }\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  No hay propiedades con ese código.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <FormLabel htmlFor=\"CustomerProperty\">\r\n                  Tipo de vínculo\r\n                </FormLabel>\r\n                <Select\r\n                  id=\"CustomerType\"\r\n                  placeholder=\"Selecciona el tipo\"\r\n                  value={propertyType}\r\n                  onChange={(event) => {\r\n                    setPropertyType(event.target.value);\r\n                    setShowErrorTypeIsRequired(false);\r\n                  }}\r\n                >\r\n                  <option value=\"Dueño\" selected>\r\n                    Dueño\r\n                  </option>\r\n                  <option value=\"Inquilino\">Inquilino</option>\r\n                </Select>\r\n                <Badge\r\n                  display={showErrorTypeIsRequired ? \"inline-block\" : \"none\"}\r\n                  id=\"requiredAddress\"\r\n                  mt=\"0.3rem\"\r\n                  variant=\"required-error\"\r\n                >\r\n                  El tipo de vínculo es requerido.\r\n                </Badge>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  w=\"100%\"\r\n                  type=\"button\"\r\n                  form=\"CustomerPropertyForm\"\r\n                  variant=\"confirm-add-button\"\r\n                  onClick={() => associateProperty()}\r\n                >\r\n                  Agregar\r\n                </Button>\r\n              </Box>\r\n              {associatedProperties.map((property) => (\r\n                <Box\r\n                  key={property.code}\r\n                  bg=\"defaultColor.500\"\r\n                  w=\"100%\"\r\n                  borderRadius=\"7px\"\r\n                  py=\"0.4rem\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  gap=\"5px\"\r\n                  position=\"relative\"\r\n                >\r\n                  <Badge\r\n                    alignSelf=\"center\"\r\n                    position=\"absolute\"\r\n                    left=\"3\"\r\n                    fontSize=\"0.7rem\"\r\n                    borderRadius=\"7px\"\r\n                  >\r\n                    {property.type}\r\n                  </Badge>\r\n                  <Box>{property.code}</Box>\r\n                  <Box\r\n                    alignSelf=\"center\"\r\n                    cursor=\"pointer\"\r\n                    position=\"absolute\"\r\n                    right=\"3\"\r\n                    onClick={() => removeAssociatedProperty(property.code)}\r\n                  >\r\n                    <RiCloseCircleFill fontSize=\"1.2rem\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button\r\n              color=\"#fff\"\r\n              variant=\"cancel-action\"\r\n              mr={3}\r\n              onClick={onClose}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"confirm-add-button\"\r\n              onClick={() => submitAssociateProperty()}\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditAssociateProperty;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  FormLabel,\r\n  Input,\r\n  Stack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport CustomersContext from \"../../context/Customers/CustomersContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FaUserEdit } from \"react-icons/fa\";\r\nimport EditAssociateProperty from \"./EditAssociateProperty\";\r\n\r\nconst EditCustomer = (props) => {\r\n  const { editCustomer, associatedPropertiesPendingToAdd } =\r\n    useContext(CustomersContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { customer, direction } = props;\r\n  const [reactiveCustomer, setReactiveCustomer] = useState(customer);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  const submitCustomer = (data) => {\r\n    if (associatedPropertiesPendingToAdd !== null) {\r\n      data.ownerProperties = associatedPropertiesPendingToAdd.ownerProperties;\r\n      data.tenantProperties = associatedPropertiesPendingToAdd.tenantProperties;\r\n    }\r\n    editCustomer(data, customer._id);\r\n    reset();\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setReactiveCustomer(customer);\r\n  }, [customer]);\r\n\r\n  return (\r\n    <>\r\n      <FaUserEdit onClick={onOpen} cursor=\"pointer\" fontSize=\"1.3rem\" />\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement={direction ? direction : \"right\"}\r\n        onClose={onClose}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          borderLeft=\"1px white solid\"\r\n          bg=\"defaultColor.400\"\r\n          borderStartStartRadius=\"7px\"\r\n          borderEndStartRadius=\"7px\"\r\n        >\r\n          <DrawerCloseButton\r\n            _focus={{ boxShadow: \"none\" }}\r\n            color=\"#fff\"\r\n            mt=\"2\"\r\n          />\r\n          <DrawerHeader color=\"#fff\" borderBottomWidth=\"1px\">\r\n            Editar cliente\r\n          </DrawerHeader>\r\n          <DrawerBody color=\"#fff\">\r\n            <form id=\"CustomerEditForm\" onSubmit={handleSubmit(submitCustomer)}>\r\n              <Stack spacing=\"14px\">\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerName\">Nombre</FormLabel>\r\n                  <Input\r\n                    {...register(\"name\", { required: \"Nombre es requerido.\" })}\r\n                    id=\"CustomerName\"\r\n                    placeholder=\"Ingresa el nombre\"\r\n                    autoComplete=\"off\"\r\n                    value={reactiveCustomer.name}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        name: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.name && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.name.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerEmail\">Email</FormLabel>\r\n                  <Input\r\n                    {...register(\"email\", { required: \"Email es requerido.\" })}\r\n                    id=\"CustomerEmail\"\r\n                    placeholder=\"Ingresa el email\"\r\n                    autoComplete=\"off\"\r\n                    type=\"email\"\r\n                    value={reactiveCustomer.email}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        email: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.email && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.email.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerPhone\">Teléfono</FormLabel>\r\n                  <Input\r\n                    {...register(\"phone\", {\r\n                      required: \"Teléfono es requerido.\",\r\n                    })}\r\n                    type=\"number\"\r\n                    id=\"CustomerPhone\"\r\n                    placeholder=\"Ingresa el télefono\"\r\n                    autoComplete=\"off\"\r\n                    value={reactiveCustomer.phone}\r\n                    onChange={(e) =>\r\n                      setReactiveCustomer({\r\n                        ...reactiveCustomer,\r\n                        phone: e.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                  {errors.phone && (\r\n                    <Badge variant=\"required-error\">\r\n                      {errors.phone.message}\r\n                    </Badge>\r\n                  )}\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor=\"CustomerProperty\">Propiedades</FormLabel>\r\n                  <EditAssociateProperty\r\n                    customer={customer}\r\n                    customerHaveProperties={customer.ownerProperties.concat(\r\n                      customer.tenantProperties\r\n                    )}\r\n                  />\r\n                </Box>\r\n              </Stack>\r\n            </form>\r\n          </DrawerBody>\r\n          <DrawerFooter borderTopWidth=\"1px\">\r\n            <Button variant=\"cancel-action\" mr={3} onClick={onClose}>\r\n              Cancelar\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              form=\"CustomerEditForm\"\r\n              variant=\"confirm-add-button\"\r\n            >\r\n              Confirmar\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCustomer;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  HStack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport CreateCustomer from \"../components/Customers/CreateCustomer\";\r\nimport CustomersContext from \"../context/Customers/CustomersContext\";\r\nimport Loader from \"../components/Other/Loader/Loader\";\r\nimport EditCustomer from \"../components/Customers/EditCustomer\";\r\nimport ConfirmDelete from \"../components/Other/ConfirmDelete\";\r\nimport ViewCustomerProperties from \"../components/Customers/ViewCustomerProperties\";\r\nimport Search from \"../components/Other/Search\";\r\n\r\nconst CustomersPage = () => {\r\n  const { customers, deleteCustomer, customersAreLoading } =\r\n    useContext(CustomersContext);\r\n  const [filteredCustomers, setFilteredCustomers] = useState(customers);\r\n\r\n  useEffect(() => {\r\n    setFilteredCustomers(customers);\r\n  }, [customers]);\r\n\r\n  const getCustomerProperties = (customer) => {\r\n    let properties = customer.ownerProperties.concat(customer.tenantProperties);\r\n    if (properties.length > 0) {\r\n      let ownerProperties = customer.ownerProperties;\r\n      let tenantProperties = customer.tenantProperties;\r\n      return (\r\n        <ViewCustomerProperties\r\n          ownerProperties={ownerProperties}\r\n          tenantProperties={tenantProperties}\r\n          customer={customer}\r\n        />\r\n      );\r\n    } else {\r\n      return <Text>Sin propiedades</Text>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box ml=\"1rem\" display=\"flex\" justifyContent=\"end\">\r\n        <Search\r\n          placeHolder=\"Busca clientes según nombre, email y teléfono...\"\r\n          listToFilter={customers}\r\n          filters={[\"name\", \"email\", \"phone\"]}\r\n          listSetter={setFilteredCustomers}\r\n        />\r\n        <CreateCustomer />\r\n      </Box>\r\n      {customersAreLoading == true ? (\r\n        <Box\r\n          h=\"100%\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Loader />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {customers && (\r\n            <Table variant=\"unstyled\" size=\"sm\">\r\n              {filteredCustomers.length > 0 && (\r\n                <Thead>\r\n                  <Tr maxWidth=\"100%\">\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Nombre\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Email\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Telefono\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"50px\">\r\n                      Propiedades\r\n                    </Th>\r\n                    <Th fontSize=\"14px\" textAlign=\"center\" maxWidth=\"60px\">\r\n                      Acciones\r\n                    </Th>\r\n                  </Tr>\r\n                </Thead>\r\n              )}\r\n\r\n              <Tbody>\r\n                {filteredCustomers.map((customer) => (\r\n                  <Tr key={customer._id}>\r\n                    <Td textAlign=\"center\" maxWidth=\"70px\">\r\n                      {customer.name}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"80px\">\r\n                      {customer.email}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"50px\">\r\n                      {customer.phone}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"60px\">\r\n                      {getCustomerProperties(customer)}\r\n                    </Td>\r\n                    <Td textAlign=\"center\" maxWidth=\"70px\">\r\n                      <HStack justifyContent=\"center\">\r\n                        <EditCustomer customer={customer} />\r\n                        <Box pb=\"0rem\" textAlign=\"center\" fontWeight=\"500\">\r\n                          <ConfirmDelete\r\n                            text=\"¿Estás seguro de que deseas eliminar este cliente?\"\r\n                            name=\"cliente\"\r\n                            onlyIcon=\"yes\"\r\n                            icon=\"userIcon\"\r\n                            noMarginTopInIcon=\"yes\"\r\n                            functionToExecute={deleteCustomer}\r\n                            element={customer}\r\n                          />\r\n                        </Box>\r\n                      </HStack>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            </Table>\r\n          )}\r\n          {customers.length === 0 && (\r\n            <Text\r\n              fontSize=\"xl\"\r\n              color=\"#000\"\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              h=\"100%\"\r\n              w=\"100%\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              mt=\"-5rem\"\r\n              zIndex=\"-10\"\r\n            >\r\n              El sistema aún no cuenta con clientes registrados.\r\n            </Text>\r\n          )}\r\n          {filteredCustomers.length === 0 && customers.length !== 0 && (\r\n            <Text\r\n              fontSize=\"xl\"\r\n              color=\"#000\"\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              w=\"100%\"\r\n              h=\"100%\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              mt=\"-5rem\"\r\n            >\r\n              No se encontraron clientes que coincidan con tu búsqueda.\r\n            </Text>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomersPage;\r\n"],"sourceRoot":""}
>>>>>>>> 98e4e882a904ce80ec8f7cadc09883b7429083cc:build/static/js/10.70d0fcac.chunk.js.map
